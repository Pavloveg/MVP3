import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç –≤ –†–æ—Å—Å–∏–∏",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-container {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown('<h1 class="main-header">üìä –ê–Ω–∞–ª–∏–∑ –¥–∏–Ω–∞–º–∏–∫–∏ –∑–∞—Ä–ø–ª–∞—Ç –≤ –†–æ—Å—Å–∏–∏ (2000-2024)</h1>', unsafe_allow_html=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        data = pd.read_csv('data/salary_analysis_data.csv')
        return data
    except FileNotFoundError:
        st.error("–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª salary_analysis_data.csv –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ data/")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫
def calculate_metrics(data, sector, start_year=2000, end_year=2024):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Ä–∞—Å–ª–∏"""
    sector_data = data[data['–û—Ç—Ä–∞—Å–ª—å'] == sector]
    
    start_data = sector_data[sector_data['–ì–æ–¥'] == start_year]
    end_data = sector_data[sector_data['–ì–æ–¥'] == end_year]
    
    if len(start_data) == 0 or len(end_data) == 0:
        return None
        
    start_salary = start_data['–ó–∞—Ä–ø–ª–∞—Ç–∞'].iloc[0]
    end_salary = end_data['–ó–∞—Ä–ø–ª–∞—Ç–∞'].iloc[0]
    start_real_salary = start_data['–†–µ–∞–ª—å–Ω–∞—è_–∑–∞—Ä–ø–ª–∞—Ç–∞'].iloc[0]
    end_real_salary = end_data['–†–µ–∞–ª—å–Ω–∞—è_–∑–∞—Ä–ø–ª–∞—Ç–∞'].iloc[0]
    
    nominal_growth = end_salary / start_salary
    real_growth = end_real_salary / start_real_salary
    years_diff = end_year - start_year
    avg_nominal_growth = (nominal_growth ** (1/years_diff) - 1) * 100
    avg_real_growth = (real_growth ** (1/years_diff) - 1) * 100
    
    return {
        'start_salary': start_salary,
        'end_salary': end_salary,
        'start_real_salary': start_real_salary,
        'end_real_salary': end_real_salary,
        'nominal_growth': nominal_growth,
        'real_growth': real_growth,
        'avg_nominal_growth': avg_nominal_growth,
        'avg_real_growth': avg_real_growth
    }

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
data = load_data()

if data is not None:
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    st.sidebar.header("üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞")
    
    # –í—ã–±–æ—Ä –æ—Ç—Ä–∞—Å–ª–µ–π
    available_sectors = data['–û—Ç—Ä–∞—Å–ª—å'].unique().tolist()
    selected_sectors = st.sidebar.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        available_sectors,
        default=available_sectors
    )
    
    # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    min_year = int(data['–ì–æ–¥'].min())
    max_year = int(data['–ì–æ–¥'].max())
    
    year_range = st.sidebar.slider(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:",
        min_value=min_year,
        max_value=max_year,
        value=(min_year, max_year),
        step=1
    )
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    filtered_data = data[
        (data['–û—Ç—Ä–∞—Å–ª—å'].isin(selected_sectors)) &
        (data['–ì–æ–¥'] >= year_range[0]) &
        (data['–ì–æ–¥'] <= year_range[1])
    ]
    
    if len(filtered_data) > 0:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        st.header("üìà –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        
        cols = st.columns(len(selected_sectors))
        
        for i, sector in enumerate(selected_sectors):
            with cols[i]:
                metrics = calculate_metrics(data, sector, year_range[0], year_range[1])
                if metrics:
                    st.markdown(f"**{sector}**")
                    st.metric(
                        f"–ó–∞—Ä–ø–ª–∞—Ç–∞ {year_range[1]}",
                        f"{metrics['end_salary']:,.0f} ‚ÇΩ",
                        f"+{(metrics['nominal_growth']-1)*100:.0f}% –∑–∞ –ø–µ—Ä–∏–æ–¥"
                    )
                    st.metric(
                        "–†–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç",
                        f"{metrics['real_growth']:.1f}x",
                        f"{metrics['avg_real_growth']:.1f}% –≤ –≥–æ–¥"
                    )
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        st.header("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        chart_type = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            ["–ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞—Ä–ø–ª–∞—Ç—ã", "–†–µ–∞–ª—å–Ω—ã–µ –∑–∞—Ä–ø–ª–∞—Ç—ã", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞", "–ò–Ω—Ñ–ª—è—Ü–∏—è"]
        )
        
        if chart_type == "–ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞—Ä–ø–ª–∞—Ç—ã":
            fig = px.line(
                filtered_data,
                x='–ì–æ–¥',
                y='–ó–∞—Ä–ø–ª–∞—Ç–∞',
                color='–û—Ç—Ä–∞—Å–ª—å',
                title='–î–∏–Ω–∞–º–∏–∫–∞ –Ω–æ–º–∏–Ω–∞–ª—å–Ω—ã—Ö –∑–∞—Ä–ø–ª–∞—Ç',
                labels={'–ó–∞—Ä–ø–ª–∞—Ç–∞': '–ó–∞—Ä–ø–ª–∞—Ç–∞, —Ä—É–±'},
                height=600
            )
            fig.update_traces(mode='lines+markers', line=dict(width=3), marker=dict(size=6))
            fig.update_layout(
                title_font_size=18,
                xaxis_title_font_size=14,
                yaxis_title_font_size=14,
                legend_font_size=12
            )
            st.plotly_chart(fig, use_container_width=True)
            
        elif chart_type == "–†–µ–∞–ª—å–Ω—ã–µ –∑–∞—Ä–ø–ª–∞—Ç—ã":
            fig = px.line(
                filtered_data,
                x='–ì–æ–¥',
                y='–†–µ–∞–ª—å–Ω–∞—è_–∑–∞—Ä–ø–ª–∞—Ç–∞',
                color='–û—Ç—Ä–∞—Å–ª—å',
                title='–î–∏–Ω–∞–º–∏–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞—Ä–ø–ª–∞—Ç (–≤ —Ü–µ–Ω–∞—Ö 2000 –≥–æ–¥–∞)',
                labels={'–†–µ–∞–ª—å–Ω–∞—è_–∑–∞—Ä–ø–ª–∞—Ç–∞': '–†–µ–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞, —Ä—É–±'},
                height=600
            )
            fig.update_traces(mode='lines+markers', line=dict(width=3), marker=dict(size=6))
            fig.update_layout(
                title_font_size=18,
                xaxis_title_font_size=14,
                yaxis_title_font_size=14,
                legend_font_size=12
            )
            st.plotly_chart(fig, use_container_width=True)
            
        elif chart_type == "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞":
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–æ—Å—Ç–∞
            growth_data = []
            for sector in selected_sectors:
                metrics = calculate_metrics(data, sector, year_range[0], year_range[1])
                if metrics:
                    growth_data.append({
                        '–û—Ç—Ä–∞—Å–ª—å': sector,
                        '–ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç': metrics['nominal_growth'],
                        '–†–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç': metrics['real_growth']
                    })
            
            if growth_data:
                growth_df = pd.DataFrame(growth_data)
                
                fig = go.Figure()
                
                fig.add_trace(go.Bar(
                    name='–ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç',
                    x=growth_df['–û—Ç—Ä–∞—Å–ª—å'],
                    y=growth_df['–ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç'],
                    marker_color='steelblue',
                    opacity=0.8
                ))
                
                fig.add_trace(go.Bar(
                    name='–†–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç',
                    x=growth_df['–û—Ç—Ä–∞—Å–ª—å'],
                    y=growth_df['–†–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç'],
                    marker_color='darkorange',
                    opacity=0.8
                ))
                
                fig.update_layout(
                    title=f'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–æ–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ ({year_range[0]}-{year_range[1]})',
                    xaxis_title='–û—Ç—Ä–∞—Å–ª—å',
                    yaxis_title='–†–æ—Å—Ç, —Ä–∞–∑',
                    barmode='group',
                    height=600,
                    title_font_size=18,
                    xaxis_title_font_size=14,
                    yaxis_title_font_size=14,
                    legend_font_size=12
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
        elif chart_type == "–ò–Ω—Ñ–ª—è—Ü–∏—è":
            # –ì—Ä–∞—Ñ–∏–∫ –∏–Ω—Ñ–ª—è—Ü–∏–∏
            inflation_data = filtered_data.drop_duplicates(subset=['–ì–æ–¥'])[['–ì–æ–¥', '–ò–Ω—Ñ–ª—è—Ü–∏—è', '–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è_–∏–Ω—Ñ–ª—è—Ü–∏—è']].sort_values('–ì–æ–¥')
            
            fig = make_subplots(
                rows=2, cols=1,
                subplot_titles=('–ì–æ–¥–æ–≤–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è', '–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è'),
                vertical_spacing=0.12
            )
            
            # –ì–æ–¥–æ–≤–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è
            colors = ['darkred' if inf > 10 else 'red' for inf in inflation_data['–ò–Ω—Ñ–ª—è—Ü–∏—è']]
            
            fig.add_trace(
                go.Bar(
                    x=inflation_data['–ì–æ–¥'],
                    y=inflation_data['–ò–Ω—Ñ–ª—è—Ü–∏—è'],
                    marker_color=colors,
                    name='–ò–Ω—Ñ–ª—è—Ü–∏—è',
                    opacity=0.7
                ),
                row=1, col=1
            )
            
            fig.add_hline(y=10, line_dash="dash", line_color="black", 
                         annotation_text="–í—ã—Å–æ–∫–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è (>10%)", row=1, col=1)
            
            # –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è
            fig.add_trace(
                go.Scatter(
                    x=inflation_data['–ì–æ–¥'],
                    y=inflation_data['–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è_–∏–Ω—Ñ–ª—è—Ü–∏—è'],
                    mode='lines+markers',
                    line=dict(color='darkred', width=3),
                    marker=dict(size=6),
                    name='–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è'
                ),
                row=2, col=1
            )
            
            fig.update_layout(
                title_text='–ê–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –≤ –†–æ—Å—Å–∏–∏',
                height=800,
                title_font_size=18,
                showlegend=False
            )
            
            fig.update_xaxes(title_text="–ì–æ–¥", title_font_size=14, row=1, col=1)
            fig.update_xaxes(title_text="–ì–æ–¥", title_font_size=14, row=2, col=1)
            fig.update_yaxes(title_text="–ò–Ω—Ñ–ª—è—Ü–∏—è, %", title_font_size=14, row=1, col=1)
            fig.update_yaxes(title_text="–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", title_font_size=14, row=2, col=1)
            
            st.plotly_chart(fig, use_container_width=True)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        st.header("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_data = filtered_data.copy()
            display_data['–ó–∞—Ä–ø–ª–∞—Ç–∞'] = display_data['–ó–∞—Ä–ø–ª–∞—Ç–∞'].round(0).astype(int)
            display_data['–†–µ–∞–ª—å–Ω–∞—è_–∑–∞—Ä–ø–ª–∞—Ç–∞'] = display_data['–†–µ–∞–ª—å–Ω–∞—è_–∑–∞—Ä–ø–ª–∞—Ç–∞'].round(0).astype(int)
            display_data['–ò–Ω—Ñ–ª—è—Ü–∏—è'] = display_data['–ò–Ω—Ñ–ª—è—Ü–∏—è'].round(1)
            display_data['–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è_–∏–Ω—Ñ–ª—è—Ü–∏—è'] = display_data['–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è_–∏–Ω—Ñ–ª—è—Ü–∏—è'].round(2)
            
            st.dataframe(
                display_data,
                use_container_width=True,
                height=400
            )
        
        # –í—ã–≤–æ–¥—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        st.header("üéØ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–ù–æ–º–∏–Ω–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç")
            for sector in selected_sectors:
                metrics = calculate_metrics(data, sector, year_range[0], year_range[1])
                if metrics:
                    st.write(f"**{sector}**: {metrics['nominal_growth']:.1f}x ({metrics['avg_nominal_growth']:.1f}% –≤ –≥–æ–¥)")
        
        with col2:
            st.subheader("–†–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç")
            for sector in selected_sectors:
                metrics = calculate_metrics(data, sector, year_range[0], year_range[1])
                if metrics:
                    st.write(f"**{sector}**: {metrics['real_growth']:.1f}x ({metrics['avg_real_growth']:.1f}% –≤ –≥–æ–¥)")
        
        # –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã
        st.subheader("–û–±—â–∏–µ –≤—ã–≤–æ–¥—ã")
        
        if len(filtered_data) > 0:
            avg_inflation = filtered_data.drop_duplicates(subset=['–ì–æ–¥'])['–ò–Ω—Ñ–ª—è—Ü–∏—è'].mean()
            max_inflation_year = filtered_data.drop_duplicates(subset=['–ì–æ–¥']).loc[filtered_data.drop_duplicates(subset=['–ì–æ–¥'])['–ò–Ω—Ñ–ª—è—Ü–∏—è'].idxmax(), '–ì–æ–¥']
            max_inflation_value = filtered_data.drop_duplicates(subset=['–ì–æ–¥'])['–ò–Ω—Ñ–ª—è—Ü–∏—è'].max()
            
            st.write(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Ñ–ª—è—Ü–∏–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: **{avg_inflation:.1f}%**")
            st.write(f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è: **{max_inflation_value:.1f}%** –≤ {max_inflation_year} –≥–æ–¥—É")
            st.write(f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥: **{year_range[0]}-{year_range[1]}** ({year_range[1] - year_range[0]} –ª–µ—Ç)")
            
            if len(selected_sectors) > 1:
                # –ù–∞—Ö–æ–¥–∏–º –ª–∏–¥–µ—Ä–∞ –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É —Ä–æ—Å—Ç—É
                best_real_growth = 0
                best_sector = ""
                for sector in selected_sectors:
                    metrics = calculate_metrics(data, sector, year_range[0], year_range[1])
                    if metrics and metrics['real_growth'] > best_real_growth:
                        best_real_growth = metrics['real_growth']
                        best_sector = sector
                
                if best_sector:
                    st.write(f"‚Ä¢ –õ–∏–¥–µ—Ä –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É —Ä–æ—Å—Ç—É –∑–∞—Ä–ø–ª–∞—Ç: **{best_sector}** ({best_real_growth:.1f}x)")
    
    else:
        st.warning("–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
st.sidebar.markdown("---")
st.sidebar.header("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
st.sidebar.markdown("""
**–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:**
- –†–æ—Å—Å—Ç–∞—Ç (–∑–∞—Ä–ø–ª–∞—Ç—ã)
- –¶–ë –†–§ (–∏–Ω—Ñ–ª—è—Ü–∏—è)

**–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:** 2000-2024

**–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è:** –†–µ–∞–ª—å–Ω—ã–µ –∑–∞—Ä–ø–ª–∞—Ç—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –≤ —Ü–µ–Ω–∞—Ö 2000 –≥–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –∫—É–º—É–ª—è—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ–ª—è—Ü–∏–∏.
""")

st.sidebar.markdown("---")
st.sidebar.markdown("üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –≤–∞—Å –æ—Ç—Ä–∞—Å–ª–µ–π –∏ –ø–µ—Ä–∏–æ–¥–æ–≤.")